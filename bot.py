import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import re
import json
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get('Olga_Carre')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MASTER_PHONE = "+79507050964"
MASTER_CHAT_ID = None
WORKING_HOURS = {"start": "09:00", "end": "20:00"}
BREAK_TIME = "13:00-14:00"  # –û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SERVICE, DATE, TIME, NAME, PHONE, CONFIRM, MASTER_MENU = range(7)

# –ë–∞–∑–∞ —É—Å–ª—É–≥ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
SERVICES = {
    "haircut_woman": {"name": "üíá –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 1500, "duration": 60},
    "haircut_man": {"name": "üíá‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 800, "duration": 45},
    "haircut_child": {"name": "üëß –î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 700, "duration": 40},
    "coloring": {"name": "üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "price": 2500, "duration": 120},
    "styling": {"name": "üí´ –£–∫–ª–∞–¥–∫–∞", "price": 1000, "duration": 30},
    "haircare": {"name": "üßñ –õ–µ—á–µ–Ω–∏–µ –≤–æ–ª–æ—Å", "price": 1200, "duration": 45},
    "complex": {"name": "‚ú® –ö–æ–º–ø–ª–µ–∫—Å (—Å—Ç—Ä–∏–∂–∫–∞+—É–∫–ª–∞–¥–∫–∞)", "price": 2200, "duration": 90}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
    cursor.execute('''CREATE TABLE IF NOT EXISTS appointments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  service TEXT,
                  service_key TEXT,
                  price INTEGER,
                  duration INTEGER,
                  date TEXT,
                  time TEXT,
                  name TEXT,
                  phone TEXT,
                  status TEXT DEFAULT 'active',
                  notes TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS earnings
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  date TEXT,
                  amount INTEGER,
                  appointments_count INTEGER,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('''CREATE TABLE IF NOT EXISTS clients
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  phone TEXT UNIQUE,
                  name TEXT,
                  visits_count INTEGER DEFAULT 0,
                  last_visit TEXT,
                  total_spent INTEGER DEFAULT 0,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    if update.effective_user.phone_number and MASTER_PHONE in update.effective_user.phone_number:
        global MASTER_CHAT_ID
        MASTER_CHAT_ID = update.effective_user.id
        await show_master_dashboard(update, context)
        return
    
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        f"‚ú® <b>–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–û–ª—å–≥–∞ –ö–∞—Ä—Ä–µ'</b>\n\n"
        "üí´ <b>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏\n"
        "‚Ä¢ –ú–æ–¥–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏\n"
        "‚Ä¢ –°—Ç–∏–ª—å–Ω—ã–µ —É–∫–ª–∞–¥–∫–∏\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /book - üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ /my_bookings - üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ /services - üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ /reviews - ‚≠ê –û—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ /contacts - üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
        "üéÅ <b>–ê–∫—Ü–∏—è:</b> 5-—è —Å—Ç—Ä–∏–∂–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="quick_book")],
        [InlineKeyboardButton("üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="show_services")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def show_master_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime('%d.%m.%Y')
    cursor.execute("""
        SELECT COUNT(*), COALESCE(SUM(price), 0) 
        FROM appointments 
        WHERE date = ? AND status = 'active'
    """, (today,))
    today_stats = cursor.fetchone()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
    month_start = datetime.now().replace(day=1).strftime('%d.%m.%Y')
    cursor.execute("""
        SELECT COUNT(*), COALESCE(SUM(price), 0) 
        FROM appointments 
        WHERE date >= ? AND status = 'active'
    """, (month_start,))
    month_stats = cursor.fetchone()
    
    # –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏
    cursor.execute("""
        SELECT time, name, service 
        FROM appointments 
        WHERE date = ? AND status = 'active'
        ORDER BY time
        LIMIT 3
    """, (today,))
    next_appointments = cursor.fetchall()
    
    conn.close()
    
    dashboard_text = (
        "üëë <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–°–¢–ï–†–ê</b>\n\n"
        f"üìä <b>–°–µ–≥–æ–¥–Ω—è ({today}):</b>\n"
        f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {today_stats[0]}\n"
        f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {today_stats[1]}‚ÇΩ\n\n"
        f"üìà <b>–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
        f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {month_stats[0]}\n"
        f"   ‚Ä¢ –î–æ—Ö–æ–¥: {month_stats[1]}‚ÇΩ\n\n"
    )
    
    if next_appointments:
        dashboard_text += "‚è∞ <b>–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
        for app in next_appointments:
            dashboard_text += f"   ‚Ä¢ {app[0]} - {app[1]} ({app[2]})\n"
    
    keyboard = [
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="master_today")],
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="master_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="master_stats")],
        [InlineKeyboardButton("üë• –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="master_clients")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="master_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(dashboard_text, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.edit_message_text(dashboard_text, reply_markup=reply_markup, parse_mode='HTML')

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    row = []
    for i, (key, service) in enumerate(SERVICES.items()):
        btn_text = f"{service['name']} - {service['price']}‚ÇΩ"
        row.append(InlineKeyboardButton(btn_text, callback_data=f"service_{key}"))
        if (i + 1) % 1 == 0:  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            keyboard.append(row)
            row = []
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>\n\n"
        "üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É—Å–ª—É–≥—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è</i>"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
    return SERVICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    service_key = query.data.replace('service_', '')
    service = SERVICES[service_key]
    
    context.user_data['service'] = service['name']
    context.user_data['service_key'] = service_key
    context.user_data['price'] = service['price']
    context.user_data['duration'] = service['duration']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    service_info = (
        f"‚ú® <b>{service['name']}</b>\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service['price']}‚ÇΩ\n"
        f"‚è± <b>–í—Ä–µ–º—è:</b> {service['duration']} –º–∏–Ω.\n\n"
    )
    
    if service_key == "haircut_woman":
        service_info += "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–∏–ª–∏—Å—Ç–∞\n‚Ä¢ –ú—ã—Ç—å–µ –≥–æ–ª–æ–≤—ã\n‚Ä¢ –°—Ç—Ä–∏–∂–∫–∞\n‚Ä¢ –£–∫–ª–∞–¥–∫–∞"
    elif service_key == "coloring":
        service_info += "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ü–≤–µ—Ç—É\n‚Ä¢ –ü–æ–¥–±–æ—Ä –∫—Ä–∞—Å–∫–∏\n‚Ä¢ –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\n‚Ä¢ –£—Ö–æ–¥ –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É", callback_data=f"confirm_service_{service_key}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ö –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥", callback_data="back_to_services")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(service_info, reply_markup=reply_markup, parse_mode='HTML')

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def confirm_service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 14 –¥–Ω–µ–π
    keyboard = []
    today = datetime.now().date()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–∞–º–∏
    month_year = today.strftime('%B %Y')
    keyboard.append([InlineKeyboardButton(f"üìÖ {month_year}", callback_data="current_month")])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in week_days])
    
    # –î–∞—Ç—ã
    row = []
    for i in range(14):
        date = today + timedelta(days=i)
        if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
            date_str = date.strftime('%d.%m.%Y')
            day_num = date.strftime('%d')
            weekday = week_days[date.weekday()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            conn = sqlite3.connect('appointments.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM appointments WHERE date = ? AND status = 'active'", (date_str,))
            appointment_count = cursor.fetchone()[0]
            conn.close()
            
            # –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å
            if appointment_count < 10:
                btn_text = f"{day_num}\n{weekday}"
                row.append(InlineKeyboardButton(btn_text, callback_data=f"date_{date_str}"))
            else:
                btn_text = f"‚ùå\n{weekday}"
                row.append(InlineKeyboardButton(btn_text, callback_data="ignore"))
            
            if len(row) == 7:
                keyboard.append(row)
                row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>\n\n"
        f"üíá –£—Å–ª—É–≥–∞: <b>{context.user_data['service']}</b>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{context.user_data['price']}‚ÇΩ</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return DATE

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤
async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reviews_text = (
        "‚≠ê <b>–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n\n"
        "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ <b>–ê–Ω–Ω–∞:</b>\n"
        "<i>¬´–û–ª—å–≥–∞ - –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞! –î–µ–ª–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç—É —Å—Ç—Ä–∏–∂–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á—É. –û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω–∞!¬ª</i>\n\n"
        "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ <b>–ú–∞—Ä–∏—è:</b>\n"
        "<i>¬´–•–æ–∂—É —É–∂–µ 3 –≥–æ–¥–∞. –í—Å–µ–≥–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫—Ä–∞—Å–∏–≤–æ –∏ –¥—É—à–µ–≤–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!¬ª</i>\n\n"
        "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ <b>–ï–ª–µ–Ω–∞:</b>\n"
        "<i>¬´–õ—É—á—à–∏–π –º–∞—Å—Ç–µ—Ä –≤ –≥–æ—Ä–æ–¥–µ! –¶–≤–µ—Ç –≤–æ–ª–æ—Å –ø–æ–¥–æ–±—Ä–∞–ª–∞ –∏–¥–µ–∞–ª—å–Ω–æ. –°–ø–∞—Å–∏–±–æ!¬ª</i>\n\n"
        "üí´ <b>–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:</b>\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–µ—Ç–∫–æ–π #–æ—Ç–∑—ã–≤"
    )
    
    await update.message.reply_text(reviews_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–∑—ã–≤–æ–≤)
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if "#–æ—Ç–∑—ã–≤" in text.lower():
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–∑—ã–≤ –º–∞—Å—Ç–µ—Ä—É
        if MASTER_CHAT_ID:
            review_text = (
                "‚≠ê <b>–ù–û–í–´–ô –û–¢–ó–´–í!</b>\n\n"
                f"üë§ <b>–û—Ç:</b> {update.effective_user.first_name}\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {text.replace('#–æ—Ç–∑—ã–≤', '').strip()}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            try:
                app = context.application
                await app.bot.send_message(
                    chat_id=MASTER_CHAT_ID,
                    text=review_text,
                    parse_mode='HTML'
                )
                await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω –¥–ª—è –Ω–∞—Å. üåü")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {e}")

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö"""
    try:
        conn = sqlite3.connect('appointments.db')
        cursor = conn.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')
        cursor.execute("""
            SELECT phone, name, time, service 
            FROM appointments 
            WHERE date = ? AND status = 'active'
        """, (tomorrow,))
        
        appointments = cursor.fetchall()
        conn.close()
        
        for phone, name, time, service in appointments:
            reminder_text = (
                "üîî <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–ü–ò–°–ò</b>\n\n"
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ <b>{tomorrow}</b> –≤ <b>{time}</b>\n"
                f"—É –≤–∞—Å –∑–∞–ø–∏—Å—å: <b>{service}</b>\n\n"
                f"üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n"
                f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +79507050964\n\n"
                "üí° <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:</b>\n"
                "‚Ä¢ –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ\n"
                "‚Ä¢ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–æ–±—â–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ\n"
                "‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n\n"
                "–ñ–¥–µ–º –≤–∞—Å! üí´"
            )
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {name} ({phone}): {tomorrow} –≤ {time}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def show_master_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    month_ago = (datetime.now() - timedelta(days=30)).strftime('%d.%m.%Y')
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
    cursor.execute("""
        SELECT service, COUNT(*), SUM(price) 
        FROM appointments 
        WHERE date >= ? AND status = 'active'
        GROUP BY service 
        ORDER BY COUNT(*) DESC
    """, (month_ago,))
    popular_services = cursor.fetchall()
    
    # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    cursor.execute("""
        SELECT name, phone, visits_count, total_spent 
        FROM clients 
        WHERE visits_count > 1 
        ORDER BY visits_count DESC 
        LIMIT 5
    """)
    regular_clients = cursor.fetchall()
    
    conn.close()
    
    stats_text = "üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
    
    stats_text += "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
    for service, count, revenue in popular_services:
        stats_text += f"‚Ä¢ {service}: {count} –∑–∞–ø. ({revenue}‚ÇΩ)\n"
    
    stats_text += "\nüë• <b>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:</b>\n"
    for name, phone, visits, spent in regular_clients:
        stats_text += f"‚Ä¢ {name}: {visits} –≤–∏–∑–∏—Ç–æ–≤ ({spent}‚ÇΩ)\n"
    
    await update.callback_query.edit_message_text(stats_text, parse_mode='HTML')

# –ë–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def show_clients_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT name, phone, visits_count, total_spent, last_visit 
        FROM clients 
        ORDER BY visits_count DESC
    """)
    clients = cursor.fetchall()
    conn.close()
    
    clients_text = "üë• <b>–ë–ê–ó–ê –ö–õ–ò–ï–ù–¢–û–í</b>\n\n"
    
    for name, phone, visits, spent, last_visit in clients[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        clients_text += (
            f"üë§ <b>{name}</b>\n"
            f"   üì± {phone}\n"
            f"   üéØ –í–∏–∑–∏—Ç–æ–≤: {visits}\n"
            f"   üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: {spent}‚ÇΩ\n"
            f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_visit}\n\n"
        )
    
    if not clients:
        clients_text += "üì≠ –ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await update.callback_query.edit_message_text(clients_text, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def master_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "master_today":
        await show_master_today_appointments(update, context)
    elif query.data == "master_all":
        await show_all_appointments(update, context)
    elif query.data == "master_stats":
        await show_master_stats(update, context)
    elif query.data == "master_clients":
        await show_clients_database(update, context)
    elif query.data == "master_settings":
        await show_master_settings(update, context)
    elif query.data == "back_to_dashboard":
        await show_master_dashboard(update, context)

# –ü–æ–∫–∞–∑ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def show_master_today_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime('%d.%m.%Y')
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT id, time, name, phone, service, price, notes 
        FROM appointments 
        WHERE date = ? AND status = 'active'
        ORDER BY time
    """, (today,))
    appointments = cursor.fetchall()
    conn.close()
    
    if not appointments:
        text = f"üì≠ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç</b>"
    else:
        text = f"üìÖ <b>–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø ({today})</b>\n\n"
        total_income = 0
        
        for app in appointments:
            total_income += app[5]
            notes = f"\n   üìù <i>{app[6]}</i>" if app[6] else ""
            text += (
                f"üïí <b>{app[1]}</b>\n"
                f"   üë§ {app[2]}\n"
                f"   üì± {app[3]}\n"
                f"   üíá {app[4]}\n"
                f"   üí∞ {app[5]}‚ÇΩ{notes}\n"
                f"   üÜî #{app[0]}\n\n"
            )
        
        text += f"üí∞ <b>–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {total_income}‚ÇΩ</b>"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
async def show_master_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    settings_text = (
        "‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –ú–ê–°–¢–ï–†–ê</b>\n\n"
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã\n"
        "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +79507050964\n"
        "üïí <b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> 9:00-20:00\n"
        "üçΩ <b>–ü–µ—Ä–µ—Ä—ã–≤:</b> 13:00-14:00\n\n"
        "<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>"
    )
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dashboard")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode='HTML')

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (date_handler, time_handler, name, phone, confirm_handler, etc.)
# –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏...

def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º job –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00)
    job_queue = application.job_queue
    job_queue.run_daily(send_reminders, time=datetime.strptime("19:00", "%H:%M").time())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    application.add_handler(CallbackQueryHandler(master_callback_handler, pattern="^master_"))
    application.add_handler(CallbackQueryHandler(master_callback_handler, pattern="^back_to_dashboard"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reviews", show_reviews))
    application.add_handler(CommandHandler("master", show_master_dashboard))
    
    # ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏...
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('book', book)],
        states={
            SERVICE: [
                CallbackQueryHandler(service_handler, pattern='^service_'),
                CallbackQueryHandler(confirm_service_handler, pattern='^confirm_service_')
            ],
            DATE: [CallbackQueryHandler(date_handler, pattern='^(date_|cancel|ignore|current_month)$')],
            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ states
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)
    
    application.run_polling()

if __name__ == '__main__':
    main()
