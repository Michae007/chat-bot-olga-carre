import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
import sqlite3
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SERVICE, DATE, TIME, NAME, PHONE = range(5)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS appointments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  service TEXT,
                  date TEXT,
                  time TEXT,
                  name TEXT,
                  phone TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º!\n\n"
        "üìÖ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –≤–≤–µ–¥–∏—Ç–µ /book\n"
        "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ /my_bookings\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel_booking"
    )

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=ReplyKeyboardMarkup([
            ['üíá –°—Ç—Ä–∏–∂–∫–∞', 'üíÖ –ú–∞–Ω–∏–∫—é—Ä'],
            ['üíÜ –ú–∞—Å—Å–∞–∂', 'üßñ SPA']
        ], one_time_keyboard=True)
    )
    return SERVICE

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
async def service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['service'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–º–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=ReplyKeyboardRemove()
    )
    return DATE

# –í–≤–æ–¥ –¥–∞—Ç—ã
async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = update.message.text
        date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
        
        if date_obj < datetime.now().date():
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:")
            return DATE
            
        context.user_data['date'] = date_str
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ (—Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú):")
        return TIME
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return DATE

# –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = update.message.text
        datetime.strptime(time_str, '%H:%M')
        context.user_data['time'] = time_str
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return NAME
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        return TIME

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO appointments (service, date, time, name, phone) VALUES (?, ?, ?, ?, ?)",
                   (context.user_data['service'], context.user_data['date'],
                    context.user_data['time'], context.user_data['name'],
                    context.user_data['phone']))
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"‚Ä¢ –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"‚Ä¢ –ò–º—è: {context.user_data['name']}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
        f"–ú—ã –∂–¥–µ–º –≤–∞—Å! üéâ"
    )
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_phone = update.message.text.replace('/my_bookings', '').strip()
    
    if not user_phone:
        await update.message.reply_text("üìû –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n/my_bookings 79123456789")
        return
    
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM appointments WHERE phone = ? ORDER BY date, time", (user_phone,))
    appointments = cursor.fetchall()
    conn.close()
    
    if not appointments:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        text += (f"ID: {app[0]}\n"
                f"–£—Å–ª—É–≥–∞: {app[1]}\n"
                f"–î–∞—Ç–∞: {app[2]}\n"
                f"–í—Ä–µ–º—è: {app[3]}\n"
                f"–ò–º—è: {app[4]}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {app[5]}\n\n")
    
    await update.message.reply_text(text)

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n/cancel_booking 1")
        return
    
    try:
        booking_id = int(args[0])
        conn = sqlite3.connect('appointments.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM appointments WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å #{booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
        
    except (ValueError, sqlite3.Error):
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('book', book)],
        states={
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, service)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_bookings", my_bookings))
    application.add_handler(CommandHandler("cancel_booking", cancel_booking))
    application.add_handler(conv_handler)
    application.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()