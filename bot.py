import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get('Olga_Carre')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞
MASTER_PHONE = "+79507050964"
MASTER_CHAT_ID = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SERVICE, DATE, TIME, NAME, PHONE, CONFIRM = range(6)

# –£—Å–ª—É–≥–∏ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä–∞
SERVICES = {
    "haircut_woman": "üíá –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1500‚ÇΩ",
    "haircut_man": "üíá‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 800‚ÇΩ", 
    "haircut_child": "üëß –î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 700‚ÇΩ",
    "coloring": "üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 2500‚ÇΩ",
    "styling": "üí´ –£–∫–ª–∞–¥–∫–∞ - 1000‚ÇΩ",
    "haircare": "üßñ –õ–µ—á–µ–Ω–∏–µ –≤–æ–ª–æ—Å - 1200‚ÇΩ"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS appointments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  service TEXT,
                  date TEXT,
                  time TEXT,
                  name TEXT,
                  phone TEXT,
                  status TEXT DEFAULT 'active',
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–û–ª—å–≥–∞ –ö–∞—Ä—Ä–µ'!\n\n"
        "‚ú® <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
        "‚Ä¢ üíá –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1500‚ÇΩ\n"
        "‚Ä¢ üíá‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 800‚ÇΩ\n" 
        "‚Ä¢ üëß –î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 700‚ÇΩ\n"
        "‚Ä¢ üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ - 2500‚ÇΩ\n"
        "‚Ä¢ üí´ –£–∫–ª–∞–¥–∫–∞ - 1000‚ÇΩ\n"
        "‚Ä¢ üßñ –õ–µ—á–µ–Ω–∏–µ –≤–æ–ª–æ—Å - 1200‚ÇΩ\n\n"
        "üìÖ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/book - üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º\n"
        "/my_bookings - üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "/cancel_booking - ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/services - üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã\n"
        "/contacts - üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        parse_mode='HTML'
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã
async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services_text = "‚ú® <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã:</b>\n\n"
    for service in SERVICES.values():
        services_text += f"‚Ä¢ {service}\n"
    
    services_text += "\nüïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
    services_text += "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
    services_text += "‚Ä¢ –°–±-–í—Å: 10:00 - 18:00\n\n"
    services_text += "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15"
    
    await update.message.reply_text(services_text, parse_mode='HTML')

# –ö–æ–Ω—Ç–∞–∫—Ç—ã
async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts_text = (
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–∞–ª–æ–Ω–∞:</b>\n\n"
        "üë©‚Äçüíº <b>–ú–∞—Å—Ç–µ—Ä:</b> –û–ª—å–≥–∞\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {MASTER_PHONE}\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "   –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "   –°–±-–í—Å: 10:00 - 18:00\n\n"
        "üí¨ <b>–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:</b>\n"
        "–ú–µ—Ç—Ä–æ '–ö—Ä–∞—Å–∏–≤–∞—è', 5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º"
    )
    await update.message.reply_text(contacts_text, parse_mode='HTML')

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    row = []
    for i, (key, service) in enumerate(SERVICES.items()):
        row.append(InlineKeyboardButton(service, callback_data=f"service_{key}"))
        if (i + 1) % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=reply_markup
    )
    return SERVICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    service_key = query.data.replace('service_', '')
    context.user_data['service'] = SERVICES[service_key]
    context.user_data['service_key'] = service_key
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (–±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π)
    keyboard = []
    today = datetime.now().date()
    row = []
    for i in range(7):
        date = today + timedelta(days=i)
        if date.weekday() < 5:  # –ü–Ω-–ü—Ç
            date_str = date.strftime('%d.%m.%Y')
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
            row.append(InlineKeyboardButton(f"{date_str} ({weekday})", callback_data=f"date_{date_str}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å–ª—É–≥–∏:\n<b>{context.user_data['service']}</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return DATE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    
    date_str = query.data.replace('date_', '')
    context.user_data['date'] = date_str
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    keyboard = []
    times = ["09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞ –∑–∞–Ω—è—Ç—ã
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT time FROM appointments WHERE date = ? AND status = 'active'", (date_str,))
    busy_times = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    row = []
    for time in times:
        if time not in busy_times:
            row.append(InlineKeyboardButton(time, callback_data=f"time_{time}"))
            if len(row) == 3:
                keyboard.append(row)
                row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_services"), 
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if not any(button.callback_data.startswith('time_') for row in keyboard for button in row):
        await query.edit_message_text(
            f"‚ùå –ù–∞ {date_str} –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É", callback_data="back_to_dates")]])
        )
        return DATE
    
    await query.edit_message_text(
        f"üïí –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}:\n–£—Å–ª—É–≥–∞: <b>{context.user_data['service']}</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    return TIME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_services":
        return await service_handler(update, context)
    elif query.data == "back_to_dates":
        return await date_handler(update, context)
    
    time_str = query.data.replace('time_', '')
    context.user_data['time'] = time_str
    
    await query.edit_message_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        parse_mode='HTML'
    )
    return NAME

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: +79123456789 –∏–ª–∏ 89123456789</i>",
        parse_mode='HTML'
    )
    return PHONE

# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^(\+7|8)?\d{10}$', phone.replace(' ', '').replace('-', '')):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79123456789 –∏–ª–∏ 89123456789"
        )
        return PHONE
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif phone.startswith('7'):
        phone = '+' + phone
    elif not phone.startswith('+7'):
        phone = '+7' + phone
    
    context.user_data['phone'] = phone
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    appointment_text = (
        "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {context.user_data['name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {context.user_data['service']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {context.user_data['date']}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {context.user_data['time']}\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</i>"
    )
    
    await update.message.reply_text(appointment_text, reply_markup=reply_markup, parse_mode='HTML')
    return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_no":
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO appointments (service, date, time, name, phone) VALUES (?, ?, ?, ?, ?)",
                   (context.user_data['service'], context.user_data['date'],
                    context.user_data['time'], context.user_data['name'],
                    context.user_data['phone']))
    appointment_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    master_text = (
        "üîî <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!</b>\n\n"
        f"üìã <b>ID –∑–∞–ø–∏—Å–∏:</b> #{appointment_id}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {context.user_data['name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone']}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {context.user_data['service']}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {context.user_data['date']}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {context.user_data['time']}\n\n"
        f"‚è∞ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω chat_id)
    global MASTER_CHAT_ID
    if MASTER_CHAT_ID:
        try:
            app = context.application
            await app.bot.send_message(
                chat_id=MASTER_CHAT_ID,
                text=master_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    success_text = (
        "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>\n"
        f"‚Ä¢ ID: #{appointment_id}\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"‚Ä¢ –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"‚Ä¢ –ò–º—è: {context.user_data['name']}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n"
        "üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> +79507050964\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n"
        "‚Ä¢ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel_booking\n\n"
        "–ñ–¥–µ–º –≤–∞—Å! üéâ"
    )
    
    await query.edit_message_text(success_text, parse_mode='HTML')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
    if context.user_data['phone'] == MASTER_PHONE and not MASTER_CHAT_ID:
        MASTER_CHAT_ID = update.effective_user.id
        logger.info(f"Master chat_id saved: {MASTER_CHAT_ID}")
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.replace('/my_bookings', '').strip()
    
    if not user_input:
        await update.message.reply_text(
            "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "<code>/my_bookings +79123456789</code>\n\n"
            "üëë <b>–î–ª—è –º–∞—Å—Ç–µ—Ä–∞:</b>\n"
            "<code>/master</code> - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏\n"
            "<code>/master_today</code> - –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            parse_mode='HTML'
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = user_input
    if phone.startswith('8'):
        phone = '+7' + phone[1:]
    elif phone.startswith('7'):
        phone = '+' + phone
    elif not phone.startswith('+7'):
        phone = '+7' + phone
    
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, service, date, time, status 
        FROM appointments 
        WHERE phone = ? 
        ORDER BY date DESC, time DESC
    """, (phone,))
    appointments = cursor.fetchall()
    conn.close()
    
    if not appointments:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    text = "üìã <b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
    for app in appointments:
        status_icon = "‚úÖ" if app[4] == 'active' else "‚ùå"
        text += (f"{status_icon} <b>ID:</b> #{app[0]}\n"
                f"   <b>–£—Å–ª—É–≥–∞:</b> {app[1]}\n"
                f"   <b>–î–∞—Ç–∞:</b> {app[2]}\n"
                f"   <b>–í—Ä–µ–º—è:</b> {app[3]}\n"
                f"   <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if app[4] == 'active' else '–û—Ç–º–µ–Ω–µ–Ω–∞'}\n\n")
    
    text += "üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>/cancel_booking ID_–∑–∞–ø–∏—Å–∏</code>"
    
    await update.message.reply_text(text, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def master_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_phone = update.effective_user.phone_number or ""
    user_input = update.message.text.replace('/master', '').replace('/master_today', '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∞—Å—Ç–µ—Ä–æ–º
    is_master = (user_phone and MASTER_PHONE in user_phone) or (user_input == MASTER_PHONE)
    
    if not is_master:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        return
    
    global MASTER_CHAT_ID
    if not MASTER_CHAT_ID:
        MASTER_CHAT_ID = update.effective_user.id
        logger.info(f"Master chat_id set: {MASTER_CHAT_ID}")
    
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    if 'today' in update.message.text:
        # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%d.%m.%Y')
        cursor.execute("""
            SELECT id, service, time, name, phone 
            FROM appointments 
            WHERE date = ? AND status = 'active'
            ORDER BY time
        """, (today,))
        appointments = cursor.fetchall()
        
        if not appointments:
            await update.message.reply_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            conn.close()
            return
        
        text = f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):</b>\n\n"
        total = 0
        for app in appointments:
            price = extract_price(app[1])
            total += price
            text += (f"üïí <b>{app[2]}</b> - {app[3]}\n"
                    f"   üì± {app[4]}\n"
                    f"   üíá {app[1]}\n"
                    f"   üÜî #{app[0]}\n\n")
        
        text += f"üí∞ <b>–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å: {total}‚ÇΩ</b>"
        
    else:
        # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT id, service, date, time, name, phone 
            FROM appointments 
            WHERE status = 'active' AND date >= date('now')
            ORDER BY date, time
        """)
        appointments = cursor.fetchall()
        
        if not appointments:
            await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            conn.close()
            return
        
        text = "üìã <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        current_date = None
        for app in appointments:
            if app[2] != current_date:
                current_date = app[2]
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][datetime.strptime(current_date, '%d.%m.%Y').weekday()]
                text += f"\nüìÖ <b>{current_date} ({weekday})</b>\n"
            
            text += (f"   üïí <b>{app[3]}</b> - {app[4]}\n"
                    f"      üì± {app[5]}\n"
                    f"      üíá {app[1]}\n"
                    f"      üÜî #{app[0]}\n")
    
    conn.close()
    await update.message.reply_text(text, parse_mode='HTML')

def extract_price(service_text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —É—Å–ª—É–≥–∏"""
    match = re.search(r'(\d+)‚ÇΩ', service_text)
    return int(match.group(1)) if match else 0

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n"
            "<code>/cancel_booking 123</code>\n\n"
            "üìã –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –∑–∞–ø–∏—Å–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/my_bookings +79123456789</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        booking_id = int(args[0])
        conn = sqlite3.connect('appointments.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        cursor.execute("SELECT * FROM appointments WHERE id = ?", (booking_id,))
        appointment = cursor.fetchone()
        
        if not appointment:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute("UPDATE appointments SET status = 'cancelled' WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            f"üíá –£—Å–ª—É–≥–∞: {appointment[1]}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment[2]}\n"
            f"üïí –í—Ä–µ–º—è: {appointment[3]}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment[4]}"
        )
        
    except (ValueError, sqlite3.Error) as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('book', book)],
        states={
            SERVICE: [CallbackQueryHandler(service_handler, pattern='^service_')],
            DATE: [CallbackQueryHandler(date_handler, pattern='^(date_|back_to_dates|cancel)$')],
            TIME: [CallbackQueryHandler(time_handler, pattern='^(time_|back_to_services|back_to_dates|cancel)$')],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CONFIRM: [CallbackQueryHandler(confirm_handler, pattern='^confirm_')]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("services", show_services))
    application.add_handler(CommandHandler("contacts", contacts))
    application.add_handler(CommandHandler("my_bookings", my_bookings))
    application.add_handler(CommandHandler("master", master_command))
    application.add_handler(CommandHandler("master_today", master_command))
    application.add_handler(CommandHandler("cancel_booking", cancel_booking))
    application.add_handler(conv_handler)
    application.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
