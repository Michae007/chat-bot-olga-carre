import os
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    BOT_TOKEN = os.environ.get('Olga_Carre')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MASTER_PHONE = "+79507050964"
MASTER_CHAT_ID = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
SERVICE, DATE, TIME, NAME, PHONE, CONFIRM = range(6)

# –ë–∞–∑–∞ —É—Å–ª—É–≥ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
SERVICES = {
    "haircut_woman": {"name": "üíá –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 1500, "duration": 60},
    "haircut_man": {"name": "üíá‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 800, "duration": 45},
    "haircut_child": {"name": "üëß –î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "price": 700, "duration": 40},
    "coloring": {"name": "üé® –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "price": 2500, "duration": 120},
    "complex": {"name": "‚ú® –ö–æ–º–ø–ª–µ–∫—Å (—Å—Ç—Ä–∏–∂–∫–∞+—É–∫–ª–∞–¥–∫–∞)", "price": 2200, "duration": 90}
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS appointments
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  service TEXT,
                  service_key TEXT,
                  price INTEGER,
                  duration INTEGER,
                  date TEXT,
                  time TEXT,
                  name TEXT,
                  phone TEXT,
                  status TEXT DEFAULT 'active',
                  notes TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS clients
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  phone TEXT UNIQUE,
                  name TEXT,
                  visits_count INTEGER DEFAULT 0,
                  last_visit TEXT,
                  total_spent INTEGER DEFAULT 0,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS reviews
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  client_name TEXT,
                  phone TEXT,
                  rating INTEGER,
                  text TEXT,
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    
    conn.commit()
    conn.close()

# –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
def update_client_info(name, phone, amount_spent):
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    today = datetime.now().strftime('%d.%m.%Y')
    
    cursor.execute('''INSERT OR REPLACE INTO clients 
                    (phone, name, visits_count, last_visit, total_spent)
                    VALUES (?, ?, 
                    COALESCE((SELECT visits_count FROM clients WHERE phone = ?), 0) + 1,
                    ?, 
                    COALESCE((SELECT total_spent FROM clients WHERE phone = ?), 0) + ?)''',
                    (phone, name, phone, today, phone, amount_spent))
    
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        f"‚ú® <b>–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã '–û–ª—å–≥–∞ –ö–∞—Ä—Ä–µ'</b>\n\n"
        "üí´ <b>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏\n"
        "‚Ä¢ –ú–æ–¥–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –°—Ç–∏–ª—å–Ω—ã–µ —É–∫–ª–∞–¥–∫–∏\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /book - üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å\n"
        "‚Ä¢ /my_bookings - üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ /services - üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ /reviews - ‚≠ê –û—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ /contacts - üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω", callback_data="quick_book")],
        [InlineKeyboardButton("üí∞ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="show_services")],
        [InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="show_contacts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def handle_main_menu_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data}")
    
    try:
        if query.data == "quick_book":
            await quick_book_handler(update, context)
        elif query.data == "show_services":
            await show_services_callback(update, context)
        elif query.data == "show_contacts":
            await show_contacts_callback(update, context)
        elif query.data == "leave_review":
            await leave_review_callback(update, context)
        elif query.data == "my_bookings_list":
            await my_bookings_callback(update, context)
        elif query.data == "leave_review_after_booking":
            await leave_review_callback(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏ - –ü–†–û–°–¢–û–ô –ò –†–ê–ë–û–ß–ò–ô
async def quick_book_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
    keyboard = []
    for key, service in SERVICES.items():
        btn_text = f"{service['name']} - {service['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"service_{key}")])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async def service_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    service_key = query.data.replace('service_', '')
    service = SERVICES[service_key]
    
    context.user_data['service'] = service['name']
    context.user_data['service_key'] = service_key
    context.user_data['price'] = service['price']
    context.user_data['duration'] = service['duration']
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ 7 –¥–Ω–µ–π
    keyboard = []
    today = datetime.now().date()
    
    for i in range(7):
        date = today + timedelta(days=i)
        if date.weekday() < 5:  # –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ü–Ω-–ü—Ç)
            date_str = date.strftime('%d.%m.%Y')
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
            conn = sqlite3.connect('appointments.db')
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM appointments WHERE date = ? AND status = 'active'", (date_str,))
            appointment_count = cursor.fetchone()[0]
            conn.close()
            
            # –ú–∞–∫—Å–∏–º—É–º 8 –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å
            if appointment_count < 8:
                btn_text = f"{date_str} ({weekday})"
                keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"date_{date_str}")])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_book")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>\n\n"
        f"üíá –£—Å–ª—É–≥–∞: <b>{service['name']}</b>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{service['price']}‚ÇΩ</b>\n"
        f"‚è± –í—Ä–µ–º—è: <b>{service['duration']} –º–∏–Ω.</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_services":
        return await quick_book_handler(update, context)
    
    date_str = query.data.replace('date_', '')
    context.user_data['date'] = date_str
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    keyboard = []
    times = ["09:00", "10:00", "11:00", "12:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT time FROM appointments WHERE date = ? AND status = 'active'", (date_str,))
    busy_times = [row[0] for row in cursor.fetchall()]
    conn.close()
    
    row = []
    for time in times:
        if time not in busy_times:
            row.append(InlineKeyboardButton(time, callback_data=f"time_{time}"))
            if len(row) == 3:
                keyboard.append(row)
                row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_dates")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üïí <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ {date_str}:</b>\n"
        f"–£—Å–ª—É–≥–∞: <b>{context.user_data['service']}</b>",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_dates":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        service_key = context.user_data.get('service_key')
        if service_key:
            service = SERVICES[service_key]
            context.user_data['service'] = service['name']
        
        keyboard = []
        today = datetime.now().date()
        
        for i in range(7):
            date = today + timedelta(days=i)
            if date.weekday() < 5:
                date_str = date.strftime('%d.%m.%Y')
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][date.weekday()]
                
                conn = sqlite3.connect('appointments.db')
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM appointments WHERE date = ? AND status = 'active'", (date_str,))
                appointment_count = cursor.fetchone()[0]
                conn.close()
                
                if appointment_count < 8:
                    btn_text = f"{date_str} ({weekday})"
                    keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"date_{date_str}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="quick_book")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</b>\n\n"
            f"üíá –£—Å–ª—É–≥–∞: <b>{context.user_data['service']}</b>",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        return
    
    time_str = query.data.replace('time_', '')
    context.user_data['time'] = time_str
    
    await query.edit_message_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>\n\n"
        "<i>–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?</i>",
        parse_mode='HTML'
    )

# –í–≤–æ–¥ –∏–º–µ–Ω–∏
async def name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "üì± <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: +79123456789 –∏–ª–∏ 89123456789</i>",
        parse_mode='HTML'
    )

# –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_clean = phone.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
    if not re.match(r'^(\+7|8|7)?\d{10}$', phone_clean):
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "+79123456789 –∏–ª–∏ 89123456789",
            parse_mode='HTML'
        )
        return PHONE
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if phone_clean.startswith('8'):
        phone = '+7' + phone_clean[1:]
    elif phone_clean.startswith('7'):
        phone = '+' + phone_clean
    elif not phone_clean.startswith('+7'):
        phone = '+7' + phone_clean
    
    context.user_data['phone'] = phone
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_edit")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    appointment_text = (
        "üìã <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ü–ò–°–ò</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {context.user_data['name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {context.user_data['service']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {context.user_data['price']}‚ÇΩ\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {context.user_data['date']}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {context.user_data['time']}\n\n"
        "<i>–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å</i>"
    )
    
    await update.message.reply_text(appointment_text, reply_markup=reply_markup, parse_mode='HTML')
    return CONFIRM

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
async def confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_no":
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return ConversationHandler.END
    
    if query.data == "confirm_edit":
        await query.edit_message_text("‚úèÔ∏è <b>–ù–∞—á–Ω–µ–º –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ:</b>", parse_mode='HTML')
        return await quick_book_handler(update, context)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("""INSERT INTO appointments 
                   (service, service_key, price, duration, date, time, name, phone) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                   (context.user_data['service'], context.user_data['service_key'],
                    context.user_data['price'], context.user_data['duration'],
                    context.user_data['date'], context.user_data['time'],
                    context.user_data['name'], context.user_data['phone']))
    appointment_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    update_client_info(context.user_data['name'], context.user_data['phone'], context.user_data['price'])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
    master_text = (
        "üîî <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨!</b>\n\n"
        f"üìã <b>ID:</b> #{appointment_id}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {context.user_data['name']}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {context.user_data['phone']}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {context.user_data['service']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {context.user_data['price']}‚ÇΩ\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {context.user_data['date']}\n"
        f"üïí <b>–í—Ä–µ–º—è:</b> {context.user_data['time']}\n\n"
        f"‚è∞ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
    global MASTER_CHAT_ID
    if MASTER_CHAT_ID:
        try:
            app = context.application
            await app.bot.send_message(
                chat_id=MASTER_CHAT_ID,
                text=master_text,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É: {e}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    success_text = (
        "‚úÖ <b>–ó–ê–ü–ò–°–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!</b>\n\n"
        f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>\n"
        f"‚Ä¢ ID: #{appointment_id}\n"
        f"‚Ä¢ –£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {context.user_data['price']}‚ÇΩ\n"
        f"‚Ä¢ –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {context.user_data['time']}\n"
        f"‚Ä¢ –ò–º—è: {context.user_data['name']}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n"
        "üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> +79507050964\n\n"
        "üí° <b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞\n"
        "‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π\n"
        "‚Ä¢ –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ: /cancel_booking ID\n\n"
        "üìû <b>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è:</b>\n"
        "–ü–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—ã—à–µ\n\n"
        "–ñ–¥–µ–º –≤–∞—Å! üí´"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review_after_booking")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(success_text, reply_markup=reply_markup, parse_mode='HTML')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –º–∞—Å—Ç–µ—Ä–∞
    if context.user_data['phone'] == MASTER_PHONE and not MASTER_CHAT_ID:
        MASTER_CHAT_ID = update.effective_user.id
        logger.info(f"Master chat_id saved: {MASTER_CHAT_ID}")
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ callback
async def show_services_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    services_text = "‚ú® <b>–ù–ê–®–ò –£–°–õ–£–ì–ò –ò –¶–ï–ù–´</b>\n\n"
    
    for service in SERVICES.values():
        services_text += f"‚Ä¢ {service['name']} - {service['price']}‚ÇΩ\n"
        services_text += f"  ‚è± {service['duration']} –º–∏–Ω.\n\n"
    
    services_text += (
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "‚Ä¢ –°–±-–í—Å: 10:00 - 18:00\n\n"
        "üçΩ <b>–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤:</b> 13:00-14:00"
    )
    
    keyboard = [[InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="quick_book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(services_text, reply_markup=reply_markup, parse_mode='HTML')

# –ü–æ–∫–∞–∑ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services_text = "‚ú® <b>–ù–ê–®–ò –£–°–õ–£–ì–ò –ò –¶–ï–ù–´</b>\n\n"
    
    for service in SERVICES.values():
        services_text += f"‚Ä¢ {service['name']} - {service['price']}‚ÇΩ\n"
        services_text += f"  ‚è± {service['duration']} –º–∏–Ω.\n\n"
    
    services_text += (
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "‚Ä¢ –°–±-–í—Å: 10:00 - 18:00\n\n"
        "üçΩ <b>–û–±–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤:</b> 13:00-14:00"
    )
    
    keyboard = [[InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="quick_book")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(services_text, reply_markup=reply_markup, parse_mode='HTML')

# –ö–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ callback
async def show_contacts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    contacts_text = (
        "üìû <b>–ö–û–ù–¢–ê–ö–¢–´ –°–ê–õ–û–ù–ê</b>\n\n"
        "üë©‚Äçüíº <b>–ú–∞—Å—Ç–µ—Ä:</b> –û–ª—å–≥–∞ –ö–∞—Ä—Ä–µ\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {MASTER_PHONE}\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "‚Ä¢ –°–±-–í—Å: 10:00 - 18:00\n\n"
        "üöá <b>–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:</b>\n"
        "–ú–µ—Ç—Ä–æ '–ö—Ä–∞—Å–∏–≤–∞—è', 5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º\n"
        "–†—è–¥–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞"
    )
    
    await query.edit_message_text(contacts_text, parse_mode='HTML')

# –ö–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
async def show_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts_text = (
        "üìû <b>–ö–û–ù–¢–ê–ö–¢–´ –°–ê–õ–û–ù–ê</b>\n\n"
        "üë©‚Äçüíº <b>–ú–∞—Å—Ç–µ—Ä:</b> –û–ª—å–≥–∞ –ö–∞—Ä—Ä–µ\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {MASTER_PHONE}\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ö—Ä–∞—Å–∏–≤–∞—è, –¥. 15\n\n"
        "üïí <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 20:00\n"
        "‚Ä¢ –°–±-–í—Å: 10:00 - 18:00\n\n"
        "üöá <b>–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:</b>\n"
        "–ú–µ—Ç—Ä–æ '–ö—Ä–∞—Å–∏–≤–∞—è', 5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º\n"
        "–†—è–¥–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞"
    )
    
    await update.message.reply_text(contacts_text, parse_mode='HTML')

# –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ callback
async def leave_review_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚≠ê <b>–û–°–¢–ê–í–¨–¢–ï –û–¢–ó–´–í</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<code>–ò–º—è\n–û—Ü–µ–Ω–∫–∞ (1-5)\n–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</code>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
        "<code>–ê–Ω–Ω–∞\n5\n–û–ª—å–≥–∞ - –≤–æ–ª—à–µ–±–Ω–∏—Ü–∞! –°—Ç—Ä–∏–∂–∫–∞ –∏–¥–µ–∞–ª—å–Ω–∞—è!</code>",
        parse_mode='HTML'
    )

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
async def show_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT client_name, rating, text FROM reviews ORDER BY created_at DESC LIMIT 5")
    reviews = cursor.fetchall()
    conn.close()
    
    if reviews:
        reviews_text = "‚≠ê <b>–ü–û–°–õ–ï–î–ù–ò–ï –û–¢–ó–´–í–´:</b>\n\n"
        for name, rating, text in reviews:
            stars = "‚òÖ" * rating + "‚òÜ" * (5 - rating)
            reviews_text += f"{stars} <b>{name}:</b>\n<i>¬´{text}¬ª</i>\n\n"
    else:
        reviews_text = (
            "‚≠ê <b>–û–¢–ó–´–í–´ –ö–õ–ò–ï–ù–¢–û–í</b>\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!\n\n"
        )
    
    reviews_text += "üí´ <b>–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    
    keyboard = [[InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(reviews_text, reply_markup=reply_markup, parse_mode='HTML')

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ callback
async def my_bookings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üìã <b>–ü–†–û–°–ú–û–¢–† –ó–ê–ü–ò–°–ï–ô</b>\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/my_bookings +79123456789</code>\n\n"
        "<i>–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –≤–∞—à</i>",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lines = text.split('\n')
    
    if len(lines) < 3:
        await update.message.reply_text(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>–ò–º—è\n–û—Ü–µ–Ω–∫–∞ (1-5)\n–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞</code>",
            parse_mode='HTML'
        )
        return
    
    name = lines[0].strip()
    try:
        rating = int(lines[1].strip())
        if rating < 1 or rating > 5:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5")
        return
    
    review_text = '\n'.join(lines[2:]).strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO reviews (client_name, rating, text) VALUES (?, ?, ?)",
                   (name, rating, review_text))
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    if MASTER_CHAT_ID:
        review_notification = (
            "‚≠ê <b>–ù–û–í–´–ô –û–¢–ó–´–í!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞:</b> {'‚òÖ' * rating}{'‚òÜ' * (5 - rating)}\n"
            f"üìù <b>–¢–µ–∫—Å—Ç:</b> {review_text}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        try:
            app = context.application
            await app.bot.send_message(
                chat_id=MASTER_CHAT_ID,
                text=review_notification,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –º–∞—Å—Ç–µ—Ä—É: {e}")
    
    await update.message.reply_text(
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
        "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üåü",
        parse_mode='HTML'
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.replace('/my_bookings', '').strip()
    
    if not user_input:
        await update.message.reply_text(
            "üìã <b>–ü–†–û–°–ú–û–¢–† –ó–ê–ü–ò–°–ï–ô</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
            "<code>/my_bookings +79123456789</code>\n\n"
            "üëë <b>–î–ª—è –º–∞—Å—Ç–µ—Ä–∞:</b>\n"
            "<code>/master +79507050964</code> - –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
            "<code>/master_today +79507050964</code> - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            parse_mode='HTML'
        )
        return
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = user_input
    phone_clean = phone.replace(' ', '').replace('-', '')
    if phone_clean.startswith('8'):
        phone = '+7' + phone_clean[1:]
    elif phone_clean.startswith('7'):
        phone = '+' + phone_clean
    elif not phone_clean.startswith('+7'):
        phone = '+7' + phone_clean
    
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, service, date, time, status, price
        FROM appointments 
        WHERE phone = ? 
        ORDER BY date DESC, time DESC
        LIMIT 10
    """, (phone,))
    appointments = cursor.fetchall()
    conn.close()
    
    if not appointments:
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    
    text = "üìã <b>–í–ê–®–ò –ó–ê–ü–ò–°–ò:</b>\n\n"
    for app in appointments:
        status_icon = "‚úÖ" if app[4] == 'active' else "‚ùå"
        status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if app[4] == 'active' else "–û—Ç–º–µ–Ω–µ–Ω–∞"
        text += (f"{status_icon} <b>ID:</b> #{app[0]}\n"
                f"   üíá <b>–£—Å–ª—É–≥–∞:</b> {app[1]}\n"
                f"   üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {app[5]}‚ÇΩ\n"
                f"   üìÖ <b>–î–∞—Ç–∞:</b> {app[2]}\n"
                f"   üïí <b>–í—Ä–µ–º—è:</b> {app[3]}\n"
                f"   üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n")
    
    text += "üí° <b>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏:</b>\n<code>/cancel_booking ID_–∑–∞–ø–∏—Å–∏</code>"
    
    await update.message.reply_text(text, parse_mode='HTML')

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
async def master_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.replace('/master', '').replace('/master_today', '').strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if user_input != MASTER_PHONE:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
        return
    
    global MASTER_CHAT_ID
    if not MASTER_CHAT_ID:
        MASTER_CHAT_ID = update.effective_user.id
        logger.info(f"Master chat_id set: {MASTER_CHAT_ID}")
    
    conn = sqlite3.connect('appointments.db')
    cursor = conn.cursor()
    
    if 'today' in update.message.text:
        # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%d.%m.%Y')
        cursor.execute("""
            SELECT id, service, time, name, phone, price
            FROM appointments 
            WHERE date = ? AND status = 'active'
            ORDER BY time
        """, (today,))
        appointments = cursor.fetchall()
        
        if not appointments:
            await update.message.reply_text(f"üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            conn.close()
            return
        
        text = f"üìÖ <b>–ó–ê–ü–ò–°–ò –ù–ê –°–ï–ì–û–î–ù–Ø ({today}):</b>\n\n"
        total = 0
        for app in appointments:
            total += app[5]
            text += (f"üïí <b>{app[2]}</b>\n"
                    f"   üë§ {app[3]}\n"
                    f"   üì± {app[4]}\n"
                    f"   üíá {app[1]}\n"
                    f"   üí∞ {app[5]}‚ÇΩ\n"
                    f"   üÜî #{app[0]}\n\n")
        
        text += f"üí∞ <b>–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {total}‚ÇΩ</b>"
        
    else:
        # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("""
            SELECT id, service, date, time, name, phone, price
            FROM appointments 
            WHERE status = 'active' AND date >= date('now')
            ORDER BY date, time
        """)
        appointments = cursor.fetchall()
        
        if not appointments:
            await update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
            conn.close()
            return
        
        text = "üìã <b>–í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ó–ê–ü–ò–°–ò:</b>\n\n"
        current_date = None
        for app in appointments:
            if app[3] != current_date:
                current_date = app[3]
                weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"][datetime.strptime(current_date, '%d.%m.%Y').weekday()]
                text += f"\nüìÖ <b>{current_date} ({weekday})</b>\n"
            
            text += (f"   üïí <b>{app[3]}</b> - {app[4]}\n"
                    f"      üì± {app[5]}\n"
                    f"      üíá {app[1]}\n"
                    f"      üí∞ {app[6]}‚ÇΩ\n"
                    f"      üÜî #{app[0]}\n")
    
    conn.close()
    await update.message.reply_text(text, parse_mode='HTML')

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n"
            "<code>/cancel_booking 123</code>\n\n"
            "üìã <b>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –∑–∞–ø–∏—Å–∏:</b>\n"
            "<code>/my_bookings +79123456789</code>",
            parse_mode='HTML'
        )
        return
    
    try:
        booking_id = int(args[0])
        conn = sqlite3.connect('appointments.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM appointments WHERE id = ?", (booking_id,))
        appointment = cursor.fetchone()
        
        if not appointment:
            await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            conn.close()
            return
        
        cursor.execute("UPDATE appointments SET status = 'cancelled' WHERE id = ?", (booking_id,))
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üìã ID: #{booking_id}\n"
            f"üíá –£—Å–ª—É–≥–∞: {appointment[1]}\n"
            f"üìÖ –î–∞—Ç–∞: {appointment[5]}\n"
            f"üïí –í—Ä–µ–º—è: {appointment[6]}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {appointment[7]}",
            parse_mode='HTML'
        )
        
    except (ValueError, sqlite3.Error) as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")

# –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('book', quick_book_handler),
            CallbackQueryHandler(quick_book_handler, pattern='^quick_book$')
        ],
        states={
            SERVICE: [
                CallbackQueryHandler(service_handler, pattern='^service_'),
            ],
            DATE: [
                CallbackQueryHandler(date_handler, pattern='^date_'),
                CallbackQueryHandler(quick_book_handler, pattern='^back_to_services$')
            ],
            TIME: [
                CallbackQueryHandler(time_handler, pattern='^time_'),
                CallbackQueryHandler(date_handler, pattern='^back_to_dates$')
            ],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            CONFIRM: [CallbackQueryHandler(confirm_handler, pattern='^confirm_')]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CallbackQueryHandler(cancel, pattern='^cancel_booking$'),
            CallbackQueryHandler(cancel, pattern='^confirm_no$')
        ]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("services", show_services))
    application.add_handler(CommandHandler("contacts", show_contacts))
    application.add_handler(CommandHandler("reviews", show_reviews))
    application.add_handler(CommandHandler("my_bookings", my_bookings))
    application.add_handler(CommandHandler("master", master_command))
    application.add_handler(CommandHandler("master_today", master_command))
    application.add_handler(CommandHandler("cancel_booking", cancel_booking))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(handle_main_menu_callbacks, pattern='^(show_services|show_contacts|leave_review|my_bookings_list|leave_review_after_booking)$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review))
    
    # ConversationHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(conv_handler)
    application.add_error_handler(error)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
